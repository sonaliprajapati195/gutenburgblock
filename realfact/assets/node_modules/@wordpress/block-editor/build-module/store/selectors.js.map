{"version":3,"names":["createSelector","getBlockType","getBlockTypes","getBlockVariations","hasBlockSupport","getPossibleBlockTransformations","parse","switchToBlockType","store","blocksStore","Platform","applyFilters","symbol","create","remove","toHTMLString","deprecated","createRegistrySelector","checkAllowListRecursive","checkAllowList","getAllPatternsDependants","getInsertBlockTypeDependants","orderBy","STORE_NAME","unlock","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","EMPTY_ARRAY","EMPTY_SET","Set","getBlockName","state","clientId","block","blocks","byClientId","get","socialLinkName","OS","name","attributes","service","isBlockValid","isValid","getBlockAttributes","getBlock","has","tree","__unstableGetBlockWithoutInnerBlocks","getBlocks","rootClientId","treeKey","areInnerBlocksControlled","innerBlocks","__unstableGetClientIdWithClientIdsTree","since","version","__unstableGetClientIdsTree","order","getBlockOrder","map","getClientIdsOfDescendants","rootIds","Array","isArray","ids","rootId","push","index","length","id","splice","getClientIdsWithDescendants","getGlobalBlockCount","blockName","clientIds","count","getBlocksByName","blockNames","foundBlocks","filter","includes","__experimentalGetGlobalBlocksByName","alternative","getBlocksByClientId","getBlockNamesByClientId","Boolean","getBlockCount","getSelectionStart","selection","selectionStart","getSelectionEnd","selectionEnd","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","_state$blocks$parents","parents","getBlockParents","ascending","current","reverse","getBlockParentsByBlockName","hasName","getBlockHierarchyRootClientId","parent","getLowestCommonAncestorWithSelectedBlock","selectedId","clientParents","selectedParents","lowestCommonAncestor","maxDepth","Math","min","getAdjacentBlockClientId","startClientId","modifier","undefined","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","getDependants","selectedClientIds","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","__unstableIsFullySelected","selectionAnchor","selectionFocus","attributeKey","offset","__unstableIsSelectionCollapsed","__unstableSelectionHasUnmergeableBlock","some","blockType","merge","__unstableIsSelectionMergeable","isForward","anchorRootClientId","focusRootClientId","anchorIndex","focusIndex","targetBlockClientId","blockToMergeClientId","targetBlockName","targetBlockType","blockToMerge","blocksToMerge","__unstableGetSelectedBlocksWithPartialSelection","blockA","blockB","htmlA","htmlB","valueA","html","valueB","text","value","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","selectedBlockClientIds","hasDraggedInnerBlock","innerClientId","isBlockBeingDragged","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","blocksMode","isTyping","isDraggingBlocks","draggedBlocks","getDraggedBlockClientIds","isAncestorBeingDragged","parentClientId","isCaretWithinFormattedText","getBlockInsertionPoint","insertionPoint","isBlockInsertionPointVisible","isValidTemplate","template","getTemplate","settings","getTemplateLock","_getBlockListSettings","_state$settings$templ","templateLock","getBlockListSettings","canInsertBlockTypeUnmemoized","allowedBlockTypes","getSettings","isBlockAllowedInEditor","isLocked","getBlockEditingMode","parentBlockListSettings","parentName","parentBlockType","parentAllowedChildBlocks","allowedBlocks","hasParentAllowedBlock","parentAllowedBlocks","hasParentListAllowedBlock","blockAllowedParentBlocks","hasBlockAllowedParent","hasBlockAllowedAncestor","blockAllowedAncestorBlocks","ancestor","ancestors","canInsert","bind","canInsertBlockType","canInsertBlocks","every","canRemoveBlock","lock","canRemoveBlocks","canMoveBlock","move","canMoveBlocks","canEditBlock","edit","canLockBlockType","nameOrType","canLockBlocks","getInsertUsage","_state$preferences$in","preferences","insertUsage","canIncludeBlockTypeInInserter","getItemFromVariation","item","variation","variationId","time","icon","title","description","category","example","hasOwnProperty","initialAttributes","keywords","frecency","calculateFrecency","duration","Date","now","buildBlockTypeItem","buildScope","isDisabled","blockItemBase","inserterVariations","variations","utility","getInserterItems","select","buildReusableBlockInserterItem","reusableBlock","wp_pattern_sync_status","src","foreground","ref","raw","content","syncStatus","syncedPatternInserterItems","getReusableBlocks","buildBlockTypeInserterItem","blockTypeInserterItems","items","reduce","accumulator","isDefault","variationMapper","groupByType","core","noncore","type","startsWith","coreItems","nonCoreItems","sortedBlockTypes","getBlockTransformItems","normalizedBlocks","buildBlockTypeTransformItem","blockTypeTransformItems","itemsByName","Object","fromEntries","entries","possibleTransforms","hasInserterItems","hasBlockType","hasReusableBlock","getAllowedBlocks","blockTypes","__experimentalGetAllowedBlocks","getDirectInsertBlock","_state$blockListSetti","defaultBlock","directInsert","blockListSettings","__experimentalGetDirectInsertBlock","__experimentalGetParsedPattern","patternName","getAllPatterns","patterns","pattern","find","__unstableSkipMigrationLogs","metadata","categories","getAllowedPatternsDependants","__experimentalGetAllowedPatterns","getParsedPattern","parsedPatterns","inserter","availableParsedPatterns","patternsAllowed","getPatternsByBlockTypes","normalizedBlockNames","filteredPatterns","__experimentalGetPatternsByBlockTypes","__experimentalGetPatternTransformItems","selectedBlockNames","from","isLastBlockChangePersistent","isPersistentChange","__experimentalGetBlockListSettingsForBlocks","blockListSettingsForBlocks","__experimentalGetReusableBlockTitle","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","isNavigationMode","editorMode","__unstableGetEditorMode","hasBlockMovingClientId","didAutomaticChange","automaticChangeStatus","isBlockHighlighted","highlightedBlock","controlledInnerBlocks","__experimentalGetActiveBlockIdByBlockNames","validBlockNames","selectedBlockClientId","entityAreaParents","wasBlockJustInserted","source","lastBlockInserted","isBlockVisible","_state$blockVisibilit","blockVisibility","__unstableGetVisibleBlocks","visibleBlocks","keys","key","size","__unstableGetContentLockingParent","result","__unstableGetTemporarilyEditingAsBlocks","temporarilyEditingAsBlocks","__unstableGetTemporarilyEditingFocusModeToRevert","temporarilyEditingFocusModeRevert","__unstableHasActiveBlockOverlayActive","blockSupportDisable","shouldEnableIfUnselected","__unstableIsWithinBlockOverlay","blockEditingMode","blockEditingModes","isContent","__experimentalHasContentRoleAttribute","parentMode","isUngroupable","_clientId","getGroupingBlockName","groupingBlockName","_isUngroupable","transforms","ungroup","isGroupable","_clientIds","groupingBlockAvailable","_isGroupable"],"sources":["@wordpress/block-editor/src/store/selectors.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\tgetBlockVariations,\n\thasBlockSupport,\n\tgetPossibleBlockTransformations,\n\tparse,\n\tswitchToBlockType,\n\tstore as blocksStore,\n} from '@wordpress/blocks';\nimport { Platform } from '@wordpress/element';\nimport { applyFilters } from '@wordpress/hooks';\nimport { symbol } from '@wordpress/icons';\nimport { create, remove, toHTMLString } from '@wordpress/rich-text';\nimport deprecated from '@wordpress/deprecated';\nimport { createRegistrySelector } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\tcheckAllowListRecursive,\n\tcheckAllowList,\n\tgetAllPatternsDependants,\n\tgetInsertBlockTypeDependants,\n} from './utils';\nimport { orderBy } from '../utils/sorting';\nimport { STORE_NAME } from './constants';\nimport { unlock } from '../lock-unlock';\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n// Module constants.\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Shared reference to an empty Set for cases where it is important to avoid\n * returning a new Set reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Set}\n */\nconst EMPTY_SET = new Set();\n\n/**\n * Returns a block's name given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {string} Block name.\n */\nexport function getBlockName( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\tconst socialLinkName = 'core/social-link';\n\n\tif ( Platform.OS !== 'web' && block?.name === socialLinkName ) {\n\t\tconst attributes = state.blocks.attributes.get( clientId );\n\t\tconst { service } = attributes ?? {};\n\n\t\treturn service ? `${ socialLinkName }-${ service }` : socialLinkName;\n\t}\n\treturn block ? block.name : null;\n}\n\n/**\n * Returns whether a block is valid or not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Is Valid.\n */\nexport function isBlockValid( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\treturn !! block && block.isValid;\n}\n\n/**\n * Returns a block's attributes given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object?} Block attributes.\n */\nexport function getBlockAttributes( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.attributes.get( clientId );\n}\n\n/**\n * Returns a block given its client ID. This is a parsed copy of the block,\n * containing its `blockName`, `clientId`, and current `attributes` state. This\n * is not the block's registration settings, which must be retrieved from the\n * blocks module registration store.\n *\n * getBlock recurses through its inner blocks until all its children blocks have\n * been retrieved. Note that getBlock will not return the child inner blocks of\n * an inner block controller. This is because an inner block controller syncs\n * itself with its own entity, and should therefore not be included with the\n * blocks of a different entity. For example, say you call `getBlocks( TP )` to\n * get the blocks of a template part. If another template part is a child of TP,\n * then the nested template part's child blocks will not be returned. This way,\n * the template block itself is considered part of the parent, but the children\n * are not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Parsed block object.\n */\nexport function getBlock( state, clientId ) {\n\tif ( ! state.blocks.byClientId.has( clientId ) ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.tree.get( clientId );\n}\n\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId.get( clientId );\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\tstate.blocks.byClientId.get( clientId ),\n\t\tstate.blocks.attributes.get( clientId ),\n\t]\n);\n\n/**\n * Returns all block objects for the current post being edited as an array in\n * the order they appear in the post. Note that this will exclude child blocks\n * of nested inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport function getBlocks( state, rootClientId ) {\n\tconst treeKey =\n\t\t! rootClientId || ! areInnerBlocksControlled( state, rootClientId )\n\t\t\t? rootClientId || ''\n\t\t\t: 'controlled||' + rootClientId;\n\treturn state.blocks.tree.get( treeKey )?.innerBlocks || EMPTY_ARRAY;\n}\n\n/**\n * Returns a stripped down block object containing only its client ID,\n * and its inner blocks' client IDs.\n *\n * @deprecated\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Client ID of the block to get.\n *\n * @return {Object} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdWithClientIdsTree = createSelector(\n\t( state, clientId ) => {\n\t\tdeprecated(\n\t\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetClientIdWithClientIdsTree\",\n\t\t\t{\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.5',\n\t\t\t}\n\t\t);\n\t\treturn {\n\t\t\tclientId,\n\t\t\tinnerBlocks: __unstableGetClientIdsTree( state, clientId ),\n\t\t};\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the block tree represented in the block-editor store from the\n * given root, consisting of stripped down block objects containing only\n * their client IDs, and their inner blocks' client IDs.\n *\n * @deprecated\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdsTree = createSelector(\n\t( state, rootClientId = '' ) => {\n\t\tdeprecated(\n\t\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetClientIdsTree\",\n\t\t\t{\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.5',\n\t\t\t}\n\t\t);\n\t\treturn getBlockOrder( state, rootClientId ).map( ( clientId ) =>\n\t\t\t__unstableGetClientIdWithClientIdsTree( state, clientId )\n\t\t);\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of all descendants of the blocks\n * given. Returned ids are ordered first by the order of the ids given, then\n * by the order that they appear in the editor.\n *\n * @param {Object}          state   Global application state.\n * @param {string|string[]} rootIds Client ID(s) for which descendant blocks are to be returned.\n *\n * @return {Array} Client IDs of descendants.\n */\nexport const getClientIdsOfDescendants = createSelector(\n\t( state, rootIds ) => {\n\t\trootIds = Array.isArray( rootIds ) ? [ ...rootIds ] : [ rootIds ];\n\t\tconst ids = [];\n\n\t\t// Add the descendants of the root blocks first.\n\t\tfor ( const rootId of rootIds ) {\n\t\t\tconst order = state.blocks.order.get( rootId );\n\t\t\tif ( order ) {\n\t\t\t\tids.push( ...order );\n\t\t\t}\n\t\t}\n\n\t\tlet index = 0;\n\n\t\t// Add the descendants of the descendants, recursively.\n\t\twhile ( index < ids.length ) {\n\t\t\tconst id = ids[ index ];\n\t\t\tconst order = state.blocks.order.get( id );\n\t\t\tif ( order ) {\n\t\t\t\tids.splice( index + 1, 0, ...order );\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\n\t\treturn ids;\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of the top-level blocks and\n * their descendants of any depth (for nested blocks). Ids are returned\n * in the same order that they appear in the editor.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} ids of top-level and descendant blocks.\n */\nexport const getClientIdsWithDescendants = ( state ) =>\n\tgetClientIdsOfDescendants( state, '' );\n\n/**\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\n * The number returned includes nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\n *\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\n */\nexport const getGlobalBlockCount = createSelector(\n\t( state, blockName ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tif ( ! blockName ) {\n\t\t\treturn clientIds.length;\n\t\t}\n\t\tlet count = 0;\n\t\tfor ( const clientId of clientIds ) {\n\t\t\tconst block = state.blocks.byClientId.get( clientId );\n\t\t\tif ( block.name === blockName ) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Returns all blocks that match a blockName. Results include nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if not specified, returns an empty array.\n *\n * @return {Array} Array of clientIds of blocks with name equal to blockName.\n */\nexport const getBlocksByName = createSelector(\n\t( state, blockName ) => {\n\t\tif ( ! blockName ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tconst blockNames = Array.isArray( blockName )\n\t\t\t? blockName\n\t\t\t: [ blockName ];\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tconst foundBlocks = clientIds.filter( ( clientId ) => {\n\t\t\tconst block = state.blocks.byClientId.get( clientId );\n\t\t\treturn blockNames.includes( block.name );\n\t\t} );\n\t\treturn foundBlocks.length > 0 ? foundBlocks : EMPTY_ARRAY;\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Returns all global blocks that match a blockName. Results include nested blocks.\n *\n * @deprecated\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if not specified, returns an empty array.\n *\n * @return {Array} Array of clientIds of blocks with name equal to blockName.\n */\nexport function __experimentalGetGlobalBlocksByName( state, blockName ) {\n\tdeprecated(\n\t\t\"wp.data.select( 'core/block-editor' ).__experimentalGetGlobalBlocksByName\",\n\t\t{\n\t\t\tsince: '6.5',\n\t\t\talternative: `wp.data.select( 'core/block-editor' ).getBlocksByName`,\n\t\t}\n\t);\n\treturn getBlocksByName( state, blockName );\n}\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * objects.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\n *\n * @return {WPBlock[]} Block objects.\n */\nexport const getBlocksByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\t( Array.isArray( clientIds ) ? clientIds : [ clientIds ] ).map(\n\t\t\t( clientId ) => getBlock( state, clientId )\n\t\t),\n\t( state, clientIds ) =>\n\t\t( Array.isArray( clientIds ) ? clientIds : [ clientIds ] ).map(\n\t\t\t( clientId ) => state.blocks.tree.get( clientId )\n\t\t)\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * names.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which block names are to be returned.\n *\n * @return {string[]} Block names.\n */\nexport const getBlockNamesByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\tgetBlocksByClientId( state, clientIds )\n\t\t\t.filter( Boolean )\n\t\t\t.map( ( block ) => block.name ),\n\t( state, clientIds ) => getBlocksByClientId( state, clientIds )\n);\n\n/**\n * Returns the number of blocks currently present in the post.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Number of blocks in the post.\n */\nexport function getBlockCount( state, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).length;\n}\n\n/**\n * Returns the current selection start block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection start information.\n */\nexport function getSelectionStart( state ) {\n\treturn state.selection.selectionStart;\n}\n\n/**\n * Returns the current selection end block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection end information.\n */\nexport function getSelectionEnd( state ) {\n\treturn state.selection.selectionEnd;\n}\n\n/**\n * Returns the current block selection start. This value may be null, and it\n * may represent either a singular block selection or multi-selection start.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection start.\n */\nexport function getBlockSelectionStart( state ) {\n\treturn state.selection.selectionStart.clientId;\n}\n\n/**\n * Returns the current block selection end. This value may be null, and it\n * may represent either a singular block selection or multi-selection end.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection end.\n */\nexport function getBlockSelectionEnd( state ) {\n\treturn state.selection.selectionEnd.clientId;\n}\n\n/**\n * Returns the number of blocks currently selected in the post.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of blocks selected in the post.\n */\nexport function getSelectedBlockCount( state ) {\n\tconst multiSelectedBlockCount =\n\t\tgetMultiSelectedBlockClientIds( state ).length;\n\n\tif ( multiSelectedBlockCount ) {\n\t\treturn multiSelectedBlockCount;\n\t}\n\n\treturn state.selection.selectionStart.clientId ? 1 : 0;\n}\n\n/**\n * Returns true if there is a single selected block, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether a single block is selected.\n */\nexport function hasSelectedBlock( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn (\n\t\t!! selectionStart.clientId &&\n\t\tselectionStart.clientId === selectionEnd.clientId\n\t);\n}\n\n/**\n * Returns the currently selected block client ID, or null if there is no\n * selected block.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Selected block client ID.\n */\nexport function getSelectedBlockClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\tconst { clientId } = selectionStart;\n\n\tif ( ! clientId || clientId !== selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn clientId;\n}\n\n/**\n * Returns the currently selected block, or null if there is no selected block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlock( state ) {\n\tconst clientId = getSelectedBlockClientId( state );\n\treturn clientId ? getBlock( state, clientId ) : null;\n}\n\n/**\n * Given a block client ID, returns the root block from which the block is\n * nested, an empty string for top-level blocks, or null if the block does not\n * exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {?string} Root client ID, if exists\n */\nexport function getBlockRootClientId( state, clientId ) {\n\treturn state.blocks.parents.get( clientId ) ?? null;\n}\n\n/**\n * Given a block client ID, returns the list of all its parents from top to bottom.\n *\n * @param {Object}  state     Editor state.\n * @param {string}  clientId  Block from which to find root client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\tconst parents = [];\n\t\tlet current = clientId;\n\t\twhile ( ( current = state.blocks.parents.get( current ) ) ) {\n\t\t\tparents.push( current );\n\t\t}\n\n\t\tif ( ! parents.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn ascending ? parents : parents.reverse();\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID and a block name, returns the list of all its parents\n * from top to bottom, filtered by the given name(s). For example, if passed\n * 'core/group' as the blockName, it will only return parents which are group\n * blocks. If passed `[ 'core/group', 'core/cover']`, as the blockName, it will\n * return parents which are group blocks and parents which are cover blocks.\n *\n * @param {Object}          state     Editor state.\n * @param {string}          clientId  Block from which to find root client ID.\n * @param {string|string[]} blockName Block name(s) to filter.\n * @param {boolean}         ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParentsByBlockName = createSelector(\n\t( state, clientId, blockName, ascending = false ) => {\n\t\tconst parents = getBlockParents( state, clientId, ascending );\n\t\tconst hasName = Array.isArray( blockName )\n\t\t\t? ( name ) => blockName.includes( name )\n\t\t\t: ( name ) => blockName === name;\n\t\treturn parents.filter( ( id ) => hasName( getBlockName( state, id ) ) );\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n/**\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {string} Root client ID\n */\nexport function getBlockHierarchyRootClientId( state, clientId ) {\n\tlet current = clientId;\n\tlet parent;\n\tdo {\n\t\tparent = current;\n\t\tcurrent = state.blocks.parents.get( current );\n\t} while ( current );\n\treturn parent;\n}\n\n/**\n * Given a block client ID, returns the lowest common ancestor with selected client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find common ancestor client ID.\n *\n * @return {string} Common ancestor client ID or undefined\n */\nexport function getLowestCommonAncestorWithSelectedBlock( state, clientId ) {\n\tconst selectedId = getSelectedBlockClientId( state );\n\tconst clientParents = [ ...getBlockParents( state, clientId ), clientId ];\n\tconst selectedParents = [\n\t\t...getBlockParents( state, selectedId ),\n\t\tselectedId,\n\t];\n\n\tlet lowestCommonAncestor;\n\n\tconst maxDepth = Math.min( clientParents.length, selectedParents.length );\n\tfor ( let index = 0; index < maxDepth; index++ ) {\n\t\tif ( clientParents[ index ] === selectedParents[ index ] ) {\n\t\t\tlowestCommonAncestor = clientParents[ index ];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lowestCommonAncestor;\n}\n\n/**\n * Returns the client ID of the block adjacent one at the given reference\n * startClientId and modifier directionality. Defaults start startClientId to\n * the selected block, and direction as next block. Returns null if there is no\n * adjacent block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n * @param {?number} modifier      Directionality multiplier (1 next, -1\n *                                previous).\n *\n * @return {?string} Return the client ID of the block, or null if none exists.\n */\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\n\t// Default to selected block.\n\tif ( startClientId === undefined ) {\n\t\tstartClientId = getSelectedBlockClientId( state );\n\t}\n\n\t// Try multi-selection starting at extent based on modifier.\n\tif ( startClientId === undefined ) {\n\t\tif ( modifier < 0 ) {\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\n\t\t} else {\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\n\t\t}\n\t}\n\n\t// Validate working start client ID.\n\tif ( ! startClientId ) {\n\t\treturn null;\n\t}\n\n\t// Retrieve start block root client ID, being careful to allow the falsey\n\t// empty string top-level root by explicitly testing against null.\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\n\tif ( rootClientId === null ) {\n\t\treturn null;\n\t}\n\n\tconst { order } = state.blocks;\n\tconst orderSet = order.get( rootClientId );\n\tconst index = orderSet.indexOf( startClientId );\n\tconst nextIndex = index + 1 * modifier;\n\n\t// Block was first in set and we're attempting to get previous.\n\tif ( nextIndex < 0 ) {\n\t\treturn null;\n\t}\n\n\t// Block was last in set and we're attempting to get next.\n\tif ( nextIndex === orderSet.length ) {\n\t\treturn null;\n\t}\n\n\t// Assume incremented index is within the set.\n\treturn orderSet[ nextIndex ];\n}\n\n/**\n * Returns the previous block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no previous\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getPreviousBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\n}\n\n/**\n * Returns the next block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no next\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getNextBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns the initial caret position for the selected block.\n * This position is to used to position the caret properly when the selected block changes.\n * If the current block is not a RichText, having initial position set to 0 means \"focus block\"\n *\n * @param {Object} state Global application state.\n *\n * @return {0|-1|null} Initial position.\n */\nexport function getSelectedBlocksInitialCaretPosition( state ) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn state.initialPosition;\n}\n\n/**\n * Returns the current selection set of block client IDs (multiselection or single selection).\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport const getSelectedBlockClientIds = createSelector(\n\t( state ) => {\n\t\tconst { selectionStart, selectionEnd } = state.selection;\n\n\t\tif ( ! selectionStart.clientId || ! selectionEnd.clientId ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\t\treturn [ selectionStart.clientId ];\n\t\t}\n\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\n\t\t// order, being careful to allow the falsey empty string top-level root\n\t\t// by explicitly testing against null.\n\t\tconst rootClientId = getBlockRootClientId(\n\t\t\tstate,\n\t\t\tselectionStart.clientId\n\t\t);\n\n\t\tif ( rootClientId === null ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\n\t\tconst startIndex = blockOrder.indexOf( selectionStart.clientId );\n\t\tconst endIndex = blockOrder.indexOf( selectionEnd.clientId );\n\n\t\tif ( startIndex > endIndex ) {\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\n\t\t}\n\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the current multi-selection set of block client IDs, or an empty\n * array if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport function getMultiSelectedBlockClientIds( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\treturn getSelectedBlockClientIds( state );\n}\n\n/**\n * Returns the current multi-selection set of blocks, or an empty array if\n * there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block objects.\n */\nexport const getMultiSelectedBlocks = createSelector(\n\t( state ) => {\n\t\tconst multiSelectedBlockClientIds =\n\t\t\tgetMultiSelectedBlockClientIds( state );\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\t...getSelectedBlockClientIds.getDependants( state ),\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the client ID of the first block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} First block client ID in the multi-selection set.\n */\nexport function getFirstMultiSelectedBlockClientId( state ) {\n\treturn getMultiSelectedBlockClientIds( state )[ 0 ] || null;\n}\n\n/**\n * Returns the client ID of the last block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Last block client ID in the multi-selection set.\n */\nexport function getLastMultiSelectedBlockClientId( state ) {\n\tconst selectedClientIds = getMultiSelectedBlockClientIds( state );\n\treturn selectedClientIds[ selectedClientIds.length - 1 ] || null;\n}\n\n/**\n * Returns true if a multi-selection exists, and the block corresponding to the\n * specified client ID is the first block of the multi-selection set, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is first in multi-selection.\n */\nexport function isFirstMultiSelectedBlock( state, clientId ) {\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\n}\n\n/**\n * Returns true if the client ID occurs within the block multi-selection, or\n * false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is in multi-selection set.\n */\nexport function isBlockMultiSelected( state, clientId ) {\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\n}\n\n/**\n * Returns true if an ancestor of the block is multi-selected, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether an ancestor of the block is in multi-selection\n *                   set.\n */\nexport const isAncestorMultiSelected = createSelector(\n\t( state, clientId ) => {\n\t\tlet ancestorClientId = clientId;\n\t\tlet isMultiSelected = false;\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\n\t\t}\n\t\treturn isMultiSelected;\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the client ID of the block which begins the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the first client ID in the selection.\n *\n * @see getFirstMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block beginning multi-selection.\n */\nexport function getMultiSelectedBlocksStartClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionStart.clientId || null;\n}\n\n/**\n * Returns the client ID of the block which ends the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the last client ID in the selection.\n *\n * @see getLastMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block ending multi-selection.\n */\nexport function getMultiSelectedBlocksEndClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionEnd.clientId || null;\n}\n\n/**\n * Returns true if the selection is not partial.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the selection is mergeable.\n */\nexport function __unstableIsFullySelected( state ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\treturn (\n\t\t! selectionAnchor.attributeKey &&\n\t\t! selectionFocus.attributeKey &&\n\t\ttypeof selectionAnchor.offset === 'undefined' &&\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t);\n}\n\n/**\n * Returns true if the selection is collapsed.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the selection is collapsed.\n */\nexport function __unstableIsSelectionCollapsed( state ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\treturn (\n\t\t!! selectionAnchor &&\n\t\t!! selectionFocus &&\n\t\tselectionAnchor.clientId === selectionFocus.clientId &&\n\t\tselectionAnchor.attributeKey === selectionFocus.attributeKey &&\n\t\tselectionAnchor.offset === selectionFocus.offset\n\t);\n}\n\nexport function __unstableSelectionHasUnmergeableBlock( state ) {\n\treturn getSelectedBlockClientIds( state ).some( ( clientId ) => {\n\t\tconst blockName = getBlockName( state, clientId );\n\t\tconst blockType = getBlockType( blockName );\n\t\treturn ! blockType.merge;\n\t} );\n}\n\n/**\n * Check whether the selection is mergeable.\n *\n * @param {Object}  state     Editor state.\n * @param {boolean} isForward Whether to merge forwards.\n *\n * @return {boolean} Whether the selection is mergeable.\n */\nexport function __unstableIsSelectionMergeable( state, isForward ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\n\t// It's not mergeable if the start and end are within the same block.\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) return false;\n\n\t// It's not mergeable if there's no rich text selection.\n\tif (\n\t\t! selectionAnchor.attributeKey ||\n\t\t! selectionFocus.attributeKey ||\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t)\n\t\treturn false;\n\n\tconst anchorRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionAnchor.clientId\n\t);\n\tconst focusRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionFocus.clientId\n\t);\n\n\t// It's not mergeable if the selection doesn't start and end in the same\n\t// block list. Maybe in the future it should be allowed.\n\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\treturn false;\n\t}\n\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t// Reassign selection start and end based on order.\n\tlet selectionStart, selectionEnd;\n\n\tif ( anchorIndex > focusIndex ) {\n\t\tselectionStart = selectionFocus;\n\t\tselectionEnd = selectionAnchor;\n\t} else {\n\t\tselectionStart = selectionAnchor;\n\t\tselectionEnd = selectionFocus;\n\t}\n\n\tconst targetBlockClientId = isForward\n\t\t? selectionEnd.clientId\n\t\t: selectionStart.clientId;\n\tconst blockToMergeClientId = isForward\n\t\t? selectionStart.clientId\n\t\t: selectionEnd.clientId;\n\n\tconst targetBlockName = getBlockName( state, targetBlockClientId );\n\tconst targetBlockType = getBlockType( targetBlockName );\n\n\tif ( ! targetBlockType.merge ) return false;\n\n\tconst blockToMerge = getBlock( state, blockToMergeClientId );\n\n\t// It's mergeable if the blocks are of the same type.\n\tif ( blockToMerge.name === targetBlockName ) return true;\n\n\t// If the blocks are of a different type, try to transform the block being\n\t// merged into the same type of block.\n\tconst blocksToMerge = switchToBlockType( blockToMerge, targetBlockName );\n\n\treturn blocksToMerge && blocksToMerge.length;\n}\n\n/**\n * Get partial selected blocks with their content updated\n * based on the selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object[]} Updated partial selected blocks.\n */\nexport const __unstableGetSelectedBlocksWithPartialSelection = ( state ) => {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\t// Can't split if the selection is not set.\n\tif (\n\t\t! selectionAnchor.attributeKey ||\n\t\t! selectionFocus.attributeKey ||\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\tconst anchorRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionAnchor.clientId\n\t);\n\tconst focusRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionFocus.clientId\n\t);\n\n\t// It's not splittable if the selection doesn't start and end in the same\n\t// block list. Maybe in the future it should be allowed.\n\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t// Reassign selection start and end based on order.\n\tconst [ selectionStart, selectionEnd ] =\n\t\tanchorIndex > focusIndex\n\t\t\t? [ selectionFocus, selectionAnchor ]\n\t\t\t: [ selectionAnchor, selectionFocus ];\n\n\tconst blockA = getBlock( state, selectionStart.clientId );\n\tconst blockB = getBlock( state, selectionEnd.clientId );\n\n\tconst htmlA = blockA.attributes[ selectionStart.attributeKey ];\n\tconst htmlB = blockB.attributes[ selectionEnd.attributeKey ];\n\n\tlet valueA = create( { html: htmlA } );\n\tlet valueB = create( { html: htmlB } );\n\n\tvalueA = remove( valueA, 0, selectionStart.offset );\n\tvalueB = remove( valueB, selectionEnd.offset, valueB.text.length );\n\n\treturn [\n\t\t{\n\t\t\t...blockA,\n\t\t\tattributes: {\n\t\t\t\t...blockA.attributes,\n\t\t\t\t[ selectionStart.attributeKey ]: toHTMLString( {\n\t\t\t\t\tvalue: valueA,\n\t\t\t\t} ),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t...blockB,\n\t\t\tattributes: {\n\t\t\t\t...blockB.attributes,\n\t\t\t\t[ selectionEnd.attributeKey ]: toHTMLString( {\n\t\t\t\t\tvalue: valueB,\n\t\t\t\t} ),\n\t\t\t},\n\t\t},\n\t];\n};\n\n/**\n * Returns an array containing all block client IDs in the editor in the order\n * they appear. Optionally accepts a root client ID of the block list for which\n * the order should be returned, defaulting to the top-level block order.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array} Ordered client IDs of editor blocks.\n */\nexport function getBlockOrder( state, rootClientId ) {\n\treturn state.blocks.order.get( rootClientId || '' ) || EMPTY_ARRAY;\n}\n\n/**\n * Returns the index at which the block corresponding to the specified client\n * ID occurs within the block order, or `-1` if the block does not exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {number} Index at which block exists in order.\n */\nexport function getBlockIndex( state, clientId ) {\n\tconst rootClientId = getBlockRootClientId( state, clientId );\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected and no multi-selection exists, or false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and multi-selection exists.\n */\nexport function isBlockSelected( state, clientId ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId !== selectionEnd.clientId ) {\n\t\treturn false;\n\t}\n\n\treturn selectionStart.clientId === clientId;\n}\n\n/**\n * Returns true if one of the block's inner blocks is selected.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block has an inner block selected\n */\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\n\tconst selectedBlockClientIds = getSelectedBlockClientIds( state );\n\n\tif ( ! selectedBlockClientIds.length ) {\n\t\treturn false;\n\t}\n\n\tif ( deep ) {\n\t\treturn selectedBlockClientIds.some( ( id ) =>\n\t\t\t// Pass true because we don't care about order and it's more\n\t\t\t// performant.\n\t\t\tgetBlockParents( state, id, true ).includes( clientId )\n\t\t);\n\t}\n\n\treturn selectedBlockClientIds.some(\n\t\t( id ) => getBlockRootClientId( state, id ) === clientId\n\t);\n}\n\n/**\n * Returns true if one of the block's inner blocks is dragged.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block has an inner block dragged\n */\nexport function hasDraggedInnerBlock( state, clientId, deep = false ) {\n\treturn getBlockOrder( state, clientId ).some(\n\t\t( innerClientId ) =>\n\t\t\tisBlockBeingDragged( state, innerClientId ) ||\n\t\t\t( deep && hasDraggedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected but isn't the last of the selected blocks. Here \"last\"\n * refers to the block sequence in the document, _not_ the sequence of\n * multi-selection, which is why `state.selectionEnd` isn't used.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and not the last in the\n *                   selection.\n */\nexport function isBlockWithinSelection( state, clientId ) {\n\tif ( ! clientId ) {\n\t\treturn false;\n\t}\n\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\n\tconst index = clientIds.indexOf( clientId );\n\treturn index > -1 && index < clientIds.length - 1;\n}\n\n/**\n * Returns true if a multi-selection has been made, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether multi-selection has been made.\n */\nexport function hasMultiSelection( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn selectionStart.clientId !== selectionEnd.clientId;\n}\n\n/**\n * Whether in the process of multi-selecting or not. This flag is only true\n * while the multi-selection is being selected (by mouse move), and is false\n * once the multi-selection has been settled.\n *\n * @see hasMultiSelection\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if multi-selecting, false if not.\n */\nexport function isMultiSelecting( state ) {\n\treturn state.isMultiSelecting;\n}\n\n/**\n * Selector that returns if multi-selection is enabled or not.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n */\nexport function isSelectionEnabled( state ) {\n\treturn state.isSelectionEnabled;\n}\n\n/**\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\n * assigned.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Block editing mode.\n */\nexport function getBlockMode( state, clientId ) {\n\treturn state.blocksMode[ clientId ] || 'visual';\n}\n\n/**\n * Returns true if the user is typing, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is typing.\n */\nexport function isTyping( state ) {\n\treturn state.isTyping;\n}\n\n/**\n * Returns true if the user is dragging blocks, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging blocks.\n */\nexport function isDraggingBlocks( state ) {\n\treturn !! state.draggedBlocks.length;\n}\n\n/**\n * Returns the client ids of any blocks being directly dragged.\n *\n * This does not include children of a parent being dragged.\n *\n * @param {Object} state Global application state.\n *\n * @return {string[]} Array of dragged block client ids.\n */\nexport function getDraggedBlockClientIds( state ) {\n\treturn state.draggedBlocks;\n}\n\n/**\n * Returns whether the block is being dragged.\n *\n * Only returns true if the block is being directly dragged,\n * not if the block is a child of a parent being dragged.\n * See `isAncestorBeingDragged` for child blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block is being dragged.\n */\nexport function isBlockBeingDragged( state, clientId ) {\n\treturn state.draggedBlocks.includes( clientId );\n}\n\n/**\n * Returns whether a parent/ancestor of the block is being dragged.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block's ancestor is being dragged.\n */\nexport function isAncestorBeingDragged( state, clientId ) {\n\t// Return early if no blocks are being dragged rather than\n\t// the more expensive check for parents.\n\tif ( ! isDraggingBlocks( state ) ) {\n\t\treturn false;\n\t}\n\n\tconst parents = getBlockParents( state, clientId );\n\treturn parents.some( ( parentClientId ) =>\n\t\tisBlockBeingDragged( state, parentClientId )\n\t);\n}\n\n/**\n * Returns true if the caret is within formatted text, or false otherwise.\n *\n * @deprecated\n *\n * @return {boolean} Whether the caret is within formatted text.\n */\nexport function isCaretWithinFormattedText() {\n\tdeprecated(\n\t\t'wp.data.select( \"core/block-editor\" ).isCaretWithinFormattedText',\n\t\t{\n\t\t\tsince: '6.1',\n\t\t\tversion: '6.3',\n\t\t}\n\t);\n\n\treturn false;\n}\n\n/**\n * Returns the insertion point, the index at which the new inserted block would\n * be placed. Defaults to the last index.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} Insertion point object with `rootClientId`, `index`.\n */\nexport const getBlockInsertionPoint = createSelector(\n\t( state ) => {\n\t\tlet rootClientId, index;\n\n\t\tconst {\n\t\t\tinsertionPoint,\n\t\t\tselection: { selectionEnd },\n\t\t} = state;\n\t\tif ( insertionPoint !== null ) {\n\t\t\treturn insertionPoint;\n\t\t}\n\n\t\tconst { clientId } = selectionEnd;\n\n\t\tif ( clientId ) {\n\t\t\trootClientId = getBlockRootClientId( state, clientId ) || undefined;\n\t\t\tindex = getBlockIndex( state, selectionEnd.clientId ) + 1;\n\t\t} else {\n\t\t\tindex = getBlockOrder( state ).length;\n\t\t}\n\n\t\treturn { rootClientId, index };\n\t},\n\t( state ) => [\n\t\tstate.insertionPoint,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tstate.blocks.parents,\n\t\tstate.blocks.order,\n\t]\n);\n\n/**\n * Returns true if we should show the block insertion point.\n *\n * @param {Object} state Global application state.\n *\n * @return {?boolean} Whether the insertion point is visible or not.\n */\nexport function isBlockInsertionPointVisible( state ) {\n\treturn state.insertionPoint !== null;\n}\n\n/**\n * Returns whether the blocks matches the template or not.\n *\n * @param {boolean} state\n * @return {?boolean} Whether the template is valid or not.\n */\nexport function isValidTemplate( state ) {\n\treturn state.template.isValid;\n}\n\n/**\n * Returns the defined block template\n *\n * @param {boolean} state\n *\n * @return {?Array} Block Template.\n */\nexport function getTemplate( state ) {\n\treturn state.settings.template;\n}\n\n/**\n * Returns the defined block template lock. Optionally accepts a root block\n * client ID as context, otherwise defaulting to the global context.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional block root client ID.\n *\n * @return {string|false} Block Template Lock\n */\nexport function getTemplateLock( state, rootClientId ) {\n\tif ( ! rootClientId ) {\n\t\treturn state.settings.templateLock ?? false;\n\t}\n\n\treturn getBlockListSettings( state, rootClientId )?.templateLock ?? false;\n}\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n * This function is not exported and not memoized because using a memoized selector\n * inside another memoized selector is just a waste of time.\n *\n * @param {Object}        state        Editor state.\n * @param {string|Object} blockName    The block type object, e.g., the response\n *                                     from the block directory; or a string name of\n *                                     an installed block type, e.g.' core/paragraph'.\n * @param {?string}       rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst canInsertBlockTypeUnmemoized = (\n\tstate,\n\tblockName,\n\trootClientId = null\n) => {\n\tlet blockType;\n\tif ( blockName && 'object' === typeof blockName ) {\n\t\tblockType = blockName;\n\t\tblockName = blockType.name;\n\t} else {\n\t\tblockType = getBlockType( blockName );\n\t}\n\tif ( ! blockType ) {\n\t\treturn false;\n\t}\n\n\tconst { allowedBlockTypes } = getSettings( state );\n\n\tconst isBlockAllowedInEditor = checkAllowList(\n\t\tallowedBlockTypes,\n\t\tblockName,\n\t\ttrue\n\t);\n\tif ( ! isBlockAllowedInEditor ) {\n\t\treturn false;\n\t}\n\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\n\tif ( isLocked ) {\n\t\treturn false;\n\t}\n\n\tif ( getBlockEditingMode( state, rootClientId ?? '' ) === 'disabled' ) {\n\t\treturn false;\n\t}\n\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\n\n\t// The parent block doesn't have settings indicating it doesn't support\n\t// inner blocks, return false.\n\tif ( rootClientId && parentBlockListSettings === undefined ) {\n\t\treturn false;\n\t}\n\n\tconst parentName = getBlockName( state, rootClientId );\n\tconst parentBlockType = getBlockType( parentName );\n\n\t// Look at the `blockType.allowedBlocks` field to determine whether this is an allowed child block.\n\tconst parentAllowedChildBlocks = parentBlockType?.allowedBlocks;\n\tlet hasParentAllowedBlock = checkAllowList(\n\t\tparentAllowedChildBlocks,\n\t\tblockName\n\t);\n\n\t// The `allowedBlocks` block list setting can further limit which blocks are allowed children.\n\tif ( hasParentAllowedBlock !== false ) {\n\t\tconst parentAllowedBlocks = parentBlockListSettings?.allowedBlocks;\n\t\tconst hasParentListAllowedBlock = checkAllowList(\n\t\t\tparentAllowedBlocks,\n\t\t\tblockName\n\t\t);\n\t\t// Never downgrade the result from `true` to `null`\n\t\tif ( hasParentListAllowedBlock !== null ) {\n\t\t\thasParentAllowedBlock = hasParentListAllowedBlock;\n\t\t}\n\t}\n\n\tconst blockAllowedParentBlocks = blockType.parent;\n\tconst hasBlockAllowedParent = checkAllowList(\n\t\tblockAllowedParentBlocks,\n\t\tparentName\n\t);\n\n\tlet hasBlockAllowedAncestor = true;\n\tconst blockAllowedAncestorBlocks = blockType.ancestor;\n\tif ( blockAllowedAncestorBlocks ) {\n\t\tconst ancestors = [\n\t\t\trootClientId,\n\t\t\t...getBlockParents( state, rootClientId ),\n\t\t];\n\n\t\thasBlockAllowedAncestor = ancestors.some( ( ancestorClientId ) =>\n\t\t\tcheckAllowList(\n\t\t\t\tblockAllowedAncestorBlocks,\n\t\t\t\tgetBlockName( state, ancestorClientId )\n\t\t\t)\n\t\t);\n\t}\n\n\tconst canInsert =\n\t\thasBlockAllowedAncestor &&\n\t\t( ( hasParentAllowedBlock === null &&\n\t\t\thasBlockAllowedParent === null ) ||\n\t\t\thasParentAllowedBlock === true ||\n\t\t\thasBlockAllowedParent === true );\n\n\tif ( ! canInsert ) {\n\t\treturn canInsert;\n\t}\n\n\t/**\n\t * This filter is an ad-hoc solution to prevent adding template parts inside post content.\n\t * Conceptually, having a filter inside a selector is bad pattern so this code will be\n\t * replaced by a declarative API that doesn't the following drawbacks:\n\t *\n\t * Filters are not reactive: Upon switching between \"template mode\" and non \"template mode\",\n\t * the filter and selector won't necessarily be executed again. For now, it doesn't matter much\n\t * because you can't switch between the two modes while the inserter stays open.\n\t *\n\t * Filters are global: Once they're defined, they will affect all editor instances and all registries.\n\t * An ideal API would only affect specific editor instances.\n\t */\n\treturn applyFilters(\n\t\t'blockEditor.__unstableCanInsertBlockType',\n\t\tcanInsert,\n\t\tblockType,\n\t\trootClientId,\n\t\t{\n\t\t\t// Pass bound selectors of the current registry. If we're in a nested\n\t\t\t// context, the data will differ from the one selected from the root\n\t\t\t// registry.\n\t\t\tgetBlock: getBlock.bind( null, state ),\n\t\t\tgetBlockParentsByBlockName: getBlockParentsByBlockName.bind(\n\t\t\t\tnull,\n\t\t\t\tstate\n\t\t\t),\n\t\t}\n\t);\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nexport const canInsertBlockType = createSelector(\n\tcanInsertBlockTypeUnmemoized,\n\t( state, blockName, rootClientId ) =>\n\t\tgetInsertBlockTypeDependants( state, rootClientId )\n);\n\n/**\n * Determines if the given blocks are allowed to be inserted into the block\n * list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be inserted.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be inserted.\n */\nexport function canInsertBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( id ) =>\n\t\tcanInsertBlockType( state, getBlockName( state, id ), rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be deleted.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block is allowed to be removed.\n */\nexport function canRemoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\tif ( attributes.lock?.remove !== undefined ) {\n\t\treturn ! attributes.lock.remove;\n\t}\n\tif ( getTemplateLock( state, rootClientId ) ) {\n\t\treturn false;\n\t}\n\n\treturn getBlockEditingMode( state, rootClientId ) !== 'disabled';\n}\n\n/**\n * Determines if the given blocks are allowed to be removed.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be removed.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be removed.\n */\nexport function canRemoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanRemoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean | undefined} Whether the given block is allowed to be moved.\n */\nexport function canMoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\tif ( attributes.lock?.move !== undefined ) {\n\t\treturn ! attributes.lock.move;\n\t}\n\tif ( getTemplateLock( state, rootClientId ) === 'all' ) {\n\t\treturn false;\n\t}\n\n\treturn getBlockEditingMode( state, rootClientId ) !== 'disabled';\n}\n\n/**\n * Determines if the given blocks are allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be moved.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be moved.\n */\nexport function canMoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanMoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be edited.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId The block client Id.\n *\n * @return {boolean} Whether the given block is allowed to be edited.\n */\nexport function canEditBlock( state, clientId ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\n\tconst { lock } = attributes;\n\n\t// When the edit is true, we cannot edit the block.\n\treturn ! lock?.edit;\n}\n\n/**\n * Determines if the given block type can be locked/unlocked by a user.\n *\n * @param {Object}          state      Editor state.\n * @param {(string|Object)} nameOrType Block name or type object.\n *\n * @return {boolean} Whether a given block type can be locked/unlocked.\n */\nexport function canLockBlockType( state, nameOrType ) {\n\tif ( ! hasBlockSupport( nameOrType, 'lock', true ) ) {\n\t\treturn false;\n\t}\n\n\t// Use block editor settings as the default value.\n\treturn !! state.settings?.canLockBlocks;\n}\n\n/**\n * Returns information about how recently and frequently a block has been inserted.\n *\n * @param {Object} state Global application state.\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\n *\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\n *                                            insert occurred as a UNIX epoch, and `count` which is\n *                                            the number of inserts that have occurred.\n */\nfunction getInsertUsage( state, id ) {\n\treturn state.preferences.insertUsage?.[ id ] ?? null;\n}\n\n/**\n * Returns whether we can show a block type in the inserter\n *\n * @param {Object}  state        Global State\n * @param {Object}  blockType    BlockType\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\n */\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\n\t\treturn false;\n\t}\n\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\n};\n\n/**\n * Return a function to be used to tranform a block variation to an inserter item\n *\n * @param {Object} state Global State\n * @param {Object} item  Denormalized inserter item\n * @return {Function} Function to transform a block variation to inserter item\n */\nconst getItemFromVariation = ( state, item ) => ( variation ) => {\n\tconst variationId = `${ item.id }/${ variation.name }`;\n\tconst { time, count = 0 } = getInsertUsage( state, variationId ) || {};\n\treturn {\n\t\t...item,\n\t\tid: variationId,\n\t\ticon: variation.icon || item.icon,\n\t\ttitle: variation.title || item.title,\n\t\tdescription: variation.description || item.description,\n\t\tcategory: variation.category || item.category,\n\t\t// If `example` is explicitly undefined for the variation, the preview will not be shown.\n\t\texample: variation.hasOwnProperty( 'example' )\n\t\t\t? variation.example\n\t\t\t: item.example,\n\t\tinitialAttributes: {\n\t\t\t...item.initialAttributes,\n\t\t\t...variation.attributes,\n\t\t},\n\t\tinnerBlocks: variation.innerBlocks,\n\t\tkeywords: variation.keywords || item.keywords,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n};\n\n/**\n * Returns the calculated frecency.\n *\n * 'frecency' is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * @param {number} time  When the last insert occurred as a UNIX epoch\n * @param {number} count The number of inserts that have occurred.\n *\n * @return {number} The calculated frecency.\n */\nconst calculateFrecency = ( time, count ) => {\n\tif ( ! time ) {\n\t\treturn count;\n\t}\n\t// The selector is cached, which means Date.now() is the last time that the\n\t// relevant state changed. This suits our needs.\n\tconst duration = Date.now() - time;\n\tswitch ( true ) {\n\t\tcase duration < MILLISECONDS_PER_HOUR:\n\t\t\treturn count * 4;\n\t\tcase duration < MILLISECONDS_PER_DAY:\n\t\t\treturn count * 2;\n\t\tcase duration < MILLISECONDS_PER_WEEK:\n\t\t\treturn count / 2;\n\t\tdefault:\n\t\t\treturn count / 4;\n\t}\n};\n\n/**\n * Returns a function that accepts a block type and builds an item to be shown\n * in a specific context. It's used for building items for Inserter and available\n * block Transfroms list.\n *\n * @param {Object} state              Editor state.\n * @param {Object} options            Options object for handling the building of a block type.\n * @param {string} options.buildScope The scope for which the item is going to be used.\n * @return {Function} Function returns an item to be shown in a specific context (Inserter|Transforms list).\n */\nconst buildBlockTypeItem =\n\t( state, { buildScope = 'inserter' } ) =>\n\t( blockType ) => {\n\t\tconst id = blockType.name;\n\n\t\tlet isDisabled = false;\n\t\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\n\t\t\tisDisabled = getBlocksByClientId(\n\t\t\t\tstate,\n\t\t\t\tgetClientIdsWithDescendants( state )\n\t\t\t).some( ( { name } ) => name === blockType.name );\n\t\t}\n\n\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\tconst blockItemBase = {\n\t\t\tid,\n\t\t\tname: blockType.name,\n\t\t\ttitle: blockType.title,\n\t\t\ticon: blockType.icon,\n\t\t\tisDisabled,\n\t\t\tfrecency: calculateFrecency( time, count ),\n\t\t};\n\t\tif ( buildScope === 'transform' ) return blockItemBase;\n\n\t\tconst inserterVariations = getBlockVariations(\n\t\t\tblockType.name,\n\t\t\t'inserter'\n\t\t);\n\t\treturn {\n\t\t\t...blockItemBase,\n\t\t\tinitialAttributes: {},\n\t\t\tdescription: blockType.description,\n\t\t\tcategory: blockType.category,\n\t\t\tkeywords: blockType.keywords,\n\t\t\tvariations: inserterVariations,\n\t\t\texample: blockType.example,\n\t\t\tutility: 1, // Deprecated.\n\t\t};\n\t};\n\n/**\n * Determines the items that appear in the inserter. Includes both static\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n *\n * Each item object contains what's necessary to display a button in the\n * inserter and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\n *\n * @param    {Object}   state             Editor state.\n * @param    {?string}  rootClientId      Optional root client ID of block list.\n *\n * @return {WPEditorInserterItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorInserterItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {string}   category          Block category that the item is associated with.\n * @property {string[]} keywords          Keywords that can be searched to find this item.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   frecency          Heuristic that combines frequency and recency.\n */\nexport const getInserterItems = createRegistrySelector( ( select ) =>\n\tcreateSelector(\n\t\t( state, rootClientId = null ) => {\n\t\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\n\t\t\t\tconst icon = ! reusableBlock.wp_pattern_sync_status\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tsrc: symbol,\n\t\t\t\t\t\t\tforeground: 'var(--wp-block-synced-color)',\n\t\t\t\t\t  }\n\t\t\t\t\t: symbol;\n\t\t\t\tconst id = `core/block/${ reusableBlock.id }`;\n\t\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\t\tconst frecency = calculateFrecency( time, count );\n\n\t\t\t\treturn {\n\t\t\t\t\tid,\n\t\t\t\t\tname: 'core/block',\n\t\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\n\t\t\t\t\ttitle: reusableBlock.title?.raw,\n\t\t\t\t\ticon,\n\t\t\t\t\tcategory: 'reusable',\n\t\t\t\t\tkeywords: [ 'reusable' ],\n\t\t\t\t\tisDisabled: false,\n\t\t\t\t\tutility: 1, // Deprecated.\n\t\t\t\t\tfrecency,\n\t\t\t\t\tcontent: reusableBlock.content?.raw,\n\t\t\t\t\tsyncStatus: reusableBlock.wp_pattern_sync_status,\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tconst syncedPatternInserterItems = canInsertBlockTypeUnmemoized(\n\t\t\t\tstate,\n\t\t\t\t'core/block',\n\t\t\t\trootClientId\n\t\t\t)\n\t\t\t\t? unlock( select( STORE_NAME ) )\n\t\t\t\t\t\t.getReusableBlocks()\n\t\t\t\t\t\t.map( buildReusableBlockInserterItem )\n\t\t\t\t: [];\n\n\t\t\tconst buildBlockTypeInserterItem = buildBlockTypeItem( state, {\n\t\t\t\tbuildScope: 'inserter',\n\t\t\t} );\n\n\t\t\tconst blockTypeInserterItems = getBlockTypes()\n\t\t\t\t.filter( ( blockType ) =>\n\t\t\t\t\tcanIncludeBlockTypeInInserter(\n\t\t\t\t\t\tstate,\n\t\t\t\t\t\tblockType,\n\t\t\t\t\t\trootClientId\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t.map( buildBlockTypeInserterItem );\n\n\t\t\tconst items = blockTypeInserterItems.reduce(\n\t\t\t\t( accumulator, item ) => {\n\t\t\t\t\tconst { variations = [] } = item;\n\t\t\t\t\t// Exclude any block type item that is to be replaced by a default variation.\n\t\t\t\t\tif ( ! variations.some( ( { isDefault } ) => isDefault ) ) {\n\t\t\t\t\t\taccumulator.push( item );\n\t\t\t\t\t}\n\t\t\t\t\tif ( variations.length ) {\n\t\t\t\t\t\tconst variationMapper = getItemFromVariation(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\titem\n\t\t\t\t\t\t);\n\t\t\t\t\t\taccumulator.push(\n\t\t\t\t\t\t\t...variations.map( variationMapper )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn accumulator;\n\t\t\t\t},\n\t\t\t\t[]\n\t\t\t);\n\n\t\t\t// Ensure core blocks are prioritized in the returned results,\n\t\t\t// because third party blocks can be registered earlier than\n\t\t\t// the core blocks (usually by using the `init` action),\n\t\t\t// thus affecting the display order.\n\t\t\t// We don't sort reusable blocks as they are handled differently.\n\t\t\tconst groupByType = ( blocks, block ) => {\n\t\t\t\tconst { core, noncore } = blocks;\n\t\t\t\tconst type = block.name.startsWith( 'core/' ) ? core : noncore;\n\n\t\t\t\ttype.push( block );\n\t\t\t\treturn blocks;\n\t\t\t};\n\t\t\tconst { core: coreItems, noncore: nonCoreItems } = items.reduce(\n\t\t\t\tgroupByType,\n\t\t\t\t{ core: [], noncore: [] }\n\t\t\t);\n\t\t\tconst sortedBlockTypes = [ ...coreItems, ...nonCoreItems ];\n\t\t\treturn [ ...sortedBlockTypes, ...syncedPatternInserterItems ];\n\t\t},\n\t\t( state, rootClientId ) => [\n\t\t\tgetBlockTypes(),\n\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks(),\n\t\t\tstate.blocks.order,\n\t\t\tstate.preferences.insertUsage,\n\t\t\t...getInsertBlockTypeDependants( state, rootClientId ),\n\t\t]\n\t)\n);\n\n/**\n * Determines the items that appear in the available block transforms list.\n *\n * Each item object contains what's necessary to display a menu item in the\n * transform list and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'frecency'.\n *\n * @param    {Object}          state        Editor state.\n * @param    {Object|Object[]} blocks       Block object or array objects.\n * @param    {?string}         rootClientId Optional root client ID of block list.\n *\n * @return {WPEditorTransformItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorTransformItem\n * @property {string}          id           Unique identifier for the item.\n * @property {string}          name         The type of block to create.\n * @property {string}          title        Title of the item, as it appears in the inserter.\n * @property {string}          icon         Dashicon for the item, as it appears in the inserter.\n * @property {boolean}         isDisabled   Whether or not the user should be prevented from inserting\n *                                          this item.\n * @property {number}          frecency     Heuristic that combines frequency and recency.\n */\nexport const getBlockTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tconst normalizedBlocks = Array.isArray( blocks ) ? blocks : [ blocks ];\n\t\tconst buildBlockTypeTransformItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'transform',\n\t\t} );\n\t\tconst blockTypeTransformItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeTransformItem );\n\n\t\tconst itemsByName = Object.fromEntries(\n\t\t\tObject.entries( blockTypeTransformItems ).map( ( [ , value ] ) => [\n\t\t\t\tvalue.name,\n\t\t\t\tvalue,\n\t\t\t] )\n\t\t);\n\n\t\tconst possibleTransforms = getPossibleBlockTransformations(\n\t\t\tnormalizedBlocks\n\t\t).reduce( ( accumulator, block ) => {\n\t\t\tif ( itemsByName[ block?.name ] ) {\n\t\t\t\taccumulator.push( itemsByName[ block.name ] );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, [] );\n\t\treturn orderBy(\n\t\t\tpossibleTransforms,\n\t\t\t( block ) => itemsByName[ block.name ].frecency,\n\t\t\t'desc'\n\t\t);\n\t},\n\t( state, blocks, rootClientId ) => [\n\t\tgetBlockTypes(),\n\t\tstate.preferences.insertUsage,\n\t\t...getInsertBlockTypeDependants( state, rootClientId ),\n\t]\n);\n\n/**\n * Determines whether there are items to show in the inserter.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Items that appear in inserter.\n */\nexport const hasInserterItems = createRegistrySelector(\n\t( select ) =>\n\t\t( state, rootClientId = null ) => {\n\t\t\tconst hasBlockType = getBlockTypes().some( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t);\n\t\t\tif ( hasBlockType ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst hasReusableBlock =\n\t\t\t\tcanInsertBlockTypeUnmemoized(\n\t\t\t\t\tstate,\n\t\t\t\t\t'core/block',\n\t\t\t\t\trootClientId\n\t\t\t\t) &&\n\t\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks().length > 0;\n\n\t\t\treturn hasReusableBlock;\n\t\t}\n);\n\n/**\n * Returns the list of allowed inserter blocks for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array?} The list of allowed block types.\n */\nexport const getAllowedBlocks = createRegistrySelector( ( select ) =>\n\tcreateSelector(\n\t\t( state, rootClientId = null ) => {\n\t\t\tif ( ! rootClientId ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst blockTypes = getBlockTypes().filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t);\n\n\t\t\tconst hasReusableBlock =\n\t\t\t\tcanInsertBlockTypeUnmemoized(\n\t\t\t\t\tstate,\n\t\t\t\t\t'core/block',\n\t\t\t\t\trootClientId\n\t\t\t\t) &&\n\t\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks().length > 0;\n\n\t\t\tif ( hasReusableBlock ) {\n\t\t\t\tblockTypes.push( 'core/block' );\n\t\t\t}\n\n\t\t\treturn blockTypes;\n\t\t},\n\t\t( state, rootClientId ) => [\n\t\t\tgetBlockTypes(),\n\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks(),\n\t\t\t...getInsertBlockTypeDependants( state, rootClientId ),\n\t\t]\n\t)\n);\n\nexport const __experimentalGetAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tdeprecated(\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetAllowedBlocks',\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getAllowedBlocks',\n\t\t\t\tsince: '6.2',\n\t\t\t\tversion: '6.4',\n\t\t\t}\n\t\t);\n\t\treturn getAllowedBlocks( state, rootClientId );\n\t},\n\t( state, rootClientId ) =>\n\t\tgetAllowedBlocks.getDependants( state, rootClientId )\n);\n\n/**\n * Returns the block to be directly inserted by the block appender.\n *\n * @param    {Object}         state            Editor state.\n * @param    {?string}        rootClientId     Optional root client ID of block list.\n *\n * @return {WPDirectInsertBlock|undefined}              The block type to be directly inserted.\n *\n * @typedef {Object} WPDirectInsertBlock\n * @property {string}         name             The type of block.\n * @property {?Object}        attributes       Attributes to pass to the newly created block.\n * @property {?Array<string>} attributesToCopy Attributes to be copied from adjecent blocks when inserted.\n */\nexport function getDirectInsertBlock( state, rootClientId = null ) {\n\tif ( ! rootClientId ) {\n\t\treturn;\n\t}\n\tconst { defaultBlock, directInsert } =\n\t\tstate.blockListSettings[ rootClientId ] ?? {};\n\tif ( ! defaultBlock || ! directInsert ) {\n\t\treturn;\n\t}\n\n\treturn defaultBlock;\n}\n\nexport function __experimentalGetDirectInsertBlock(\n\tstate,\n\trootClientId = null\n) {\n\tdeprecated(\n\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetDirectInsertBlock',\n\t\t{\n\t\t\talternative:\n\t\t\t\t'wp.data.select( \"core/block-editor\" ).getDirectInsertBlock',\n\t\t\tsince: '6.3',\n\t\t\tversion: '6.4',\n\t\t}\n\t);\n\treturn getDirectInsertBlock( state, rootClientId );\n}\n\nexport const __experimentalGetParsedPattern = createRegistrySelector(\n\t( select ) =>\n\t\tcreateSelector( ( state, patternName ) => {\n\t\t\tconst { getAllPatterns } = unlock( select( STORE_NAME ) );\n\t\t\tconst patterns = getAllPatterns();\n\t\t\tconst pattern = patterns.find(\n\t\t\t\t( { name } ) => name === patternName\n\t\t\t);\n\t\t\tif ( ! pattern ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst blocks = parse( pattern.content, {\n\t\t\t\t__unstableSkipMigrationLogs: true,\n\t\t\t} );\n\t\t\tif ( blocks.length === 1 ) {\n\t\t\t\tblocks[ 0 ].attributes = {\n\t\t\t\t\t...blocks[ 0 ].attributes,\n\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t...( blocks[ 0 ].attributes.metadata || {} ),\n\t\t\t\t\t\tcategories: pattern.categories,\n\t\t\t\t\t\tpatternName: pattern.name,\n\t\t\t\t\t\tname:\n\t\t\t\t\t\t\tblocks[ 0 ].attributes.metadata?.name ||\n\t\t\t\t\t\t\tpattern.title,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...pattern,\n\t\t\t\tblocks,\n\t\t\t};\n\t\t}, getAllPatternsDependants( select ) )\n);\n\nconst getAllowedPatternsDependants = ( select ) => ( state, rootClientId ) => [\n\t...getAllPatternsDependants( select )( state ),\n\t...getInsertBlockTypeDependants( state, rootClientId ),\n];\n\n/**\n * Returns the list of allowed patterns for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional target root client ID.\n *\n * @return {Array?} The list of allowed patterns.\n */\nexport const __experimentalGetAllowedPatterns = createRegistrySelector(\n\t( select ) => {\n\t\treturn createSelector( ( state, rootClientId = null ) => {\n\t\t\tconst {\n\t\t\t\tgetAllPatterns,\n\t\t\t\t__experimentalGetParsedPattern: getParsedPattern,\n\t\t\t} = unlock( select( STORE_NAME ) );\n\t\t\tconst patterns = getAllPatterns();\n\t\t\tconst { allowedBlockTypes } = getSettings( state );\n\n\t\t\tconst parsedPatterns = patterns\n\t\t\t\t.filter( ( { inserter = true } ) => !! inserter )\n\t\t\t\t.map( ( { name } ) => getParsedPattern( name ) );\n\t\t\tconst availableParsedPatterns = parsedPatterns.filter(\n\t\t\t\t( { blocks } ) =>\n\t\t\t\t\tcheckAllowListRecursive( blocks, allowedBlockTypes )\n\t\t\t);\n\t\t\tconst patternsAllowed = availableParsedPatterns.filter(\n\t\t\t\t( { blocks } ) =>\n\t\t\t\t\tblocks.every( ( { name } ) =>\n\t\t\t\t\t\tcanInsertBlockType( state, name, rootClientId )\n\t\t\t\t\t)\n\t\t\t);\n\n\t\t\treturn patternsAllowed;\n\t\t}, getAllowedPatternsDependants( select ) );\n\t}\n);\n\n/**\n * Returns the list of patterns based on their declared `blockTypes`\n * and a block's name.\n * Patterns can use `blockTypes` to integrate in work flows like\n * suggesting appropriate patterns in a Placeholder state(during insertion)\n * or blocks transformations.\n *\n * @param {Object}          state        Editor state.\n * @param {string|string[]} blockNames   Block's name or array of block names to find matching pattens.\n * @param {?string}         rootClientId Optional target root client ID.\n *\n * @return {Array} The list of matched block patterns based on declared `blockTypes` and block name.\n */\nexport const getPatternsByBlockTypes = createRegistrySelector( ( select ) =>\n\tcreateSelector(\n\t\t( state, blockNames, rootClientId = null ) => {\n\t\t\tif ( ! blockNames ) return EMPTY_ARRAY;\n\t\t\tconst patterns =\n\t\t\t\tselect( STORE_NAME ).__experimentalGetAllowedPatterns(\n\t\t\t\t\trootClientId\n\t\t\t\t);\n\t\t\tconst normalizedBlockNames = Array.isArray( blockNames )\n\t\t\t\t? blockNames\n\t\t\t\t: [ blockNames ];\n\t\t\tconst filteredPatterns = patterns.filter( ( pattern ) =>\n\t\t\t\tpattern?.blockTypes?.some?.( ( blockName ) =>\n\t\t\t\t\tnormalizedBlockNames.includes( blockName )\n\t\t\t\t)\n\t\t\t);\n\t\t\tif ( filteredPatterns.length === 0 ) {\n\t\t\t\treturn EMPTY_ARRAY;\n\t\t\t}\n\t\t\treturn filteredPatterns;\n\t\t},\n\t\t( state, blockNames, rootClientId ) =>\n\t\t\tgetAllowedPatternsDependants( select )( state, rootClientId )\n\t)\n);\n\nexport const __experimentalGetPatternsByBlockTypes = createRegistrySelector(\n\t( select ) => {\n\t\tdeprecated(\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetPatternsByBlockTypes',\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getPatternsByBlockTypes',\n\t\t\t\tsince: '6.2',\n\t\t\t\tversion: '6.4',\n\t\t\t}\n\t\t);\n\t\treturn select( STORE_NAME ).getPatternsByBlockTypes;\n\t}\n);\n\n/**\n * Determines the items that appear in the available pattern transforms list.\n *\n * For now we only handle blocks without InnerBlocks and take into account\n * the `__experimentalRole` property of blocks' attributes for the transformation.\n *\n * We return the first set of possible eligible block patterns,\n * by checking the `blockTypes` property. We still have to recurse through\n * block pattern's blocks and try to find matches from the selected blocks.\n * Now this happens in the consumer to avoid heavy operations in the selector.\n *\n * @param {Object}   state        Editor state.\n * @param {Object[]} blocks       The selected blocks.\n * @param {?string}  rootClientId Optional root client ID of block list.\n *\n * @return {WPBlockPattern[]} Items that are eligible for a pattern transformation.\n */\nexport const __experimentalGetPatternTransformItems = createRegistrySelector(\n\t( select ) =>\n\t\tcreateSelector(\n\t\t\t( state, blocks, rootClientId = null ) => {\n\t\t\t\tif ( ! blocks ) return EMPTY_ARRAY;\n\t\t\t\t/**\n\t\t\t\t * For now we only handle blocks without InnerBlocks and take into account\n\t\t\t\t * the `__experimentalRole` property of blocks' attributes for the transformation.\n\t\t\t\t * Note that the blocks have been retrieved through `getBlock`, which doesn't\n\t\t\t\t * return the inner blocks of an inner block controller, so we still need\n\t\t\t\t * to check for this case too.\n\t\t\t\t */\n\t\t\t\tif (\n\t\t\t\t\tblocks.some(\n\t\t\t\t\t\t( { clientId, innerBlocks } ) =>\n\t\t\t\t\t\t\tinnerBlocks.length ||\n\t\t\t\t\t\t\tareInnerBlocksControlled( state, clientId )\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn EMPTY_ARRAY;\n\t\t\t\t}\n\n\t\t\t\t// Create a Set of the selected block names that is used in patterns filtering.\n\t\t\t\tconst selectedBlockNames = Array.from(\n\t\t\t\t\tnew Set( blocks.map( ( { name } ) => name ) )\n\t\t\t\t);\n\t\t\t\t/**\n\t\t\t\t * Here we will return first set of possible eligible block patterns,\n\t\t\t\t * by checking the `blockTypes` property. We still have to recurse through\n\t\t\t\t * block pattern's blocks and try to find matches from the selected blocks.\n\t\t\t\t * Now this happens in the consumer to avoid heavy operations in the selector.\n\t\t\t\t */\n\t\t\t\treturn select( STORE_NAME ).getPatternsByBlockTypes(\n\t\t\t\t\tselectedBlockNames,\n\t\t\t\t\trootClientId\n\t\t\t\t);\n\t\t\t},\n\t\t\t( state, blocks, rootClientId ) =>\n\t\t\t\tgetAllowedPatternsDependants( select )( state, rootClientId )\n\t\t)\n);\n\n/**\n * Returns the Block List settings of a block, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {?string} clientId Block client ID.\n *\n * @return {?Object} Block settings of the block if set.\n */\nexport function getBlockListSettings( state, clientId ) {\n\treturn state.blockListSettings[ clientId ];\n}\n\n/**\n * Returns the editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getSettings( state ) {\n\treturn state.settings;\n}\n\n/**\n * Returns true if the most recent block change is be considered persistent, or\n * false otherwise. A persistent change is one committed by BlockEditorProvider\n * via its `onChange` callback, in addition to `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was persistent.\n */\nexport function isLastBlockChangePersistent( state ) {\n\treturn state.blocks.isPersistentChange;\n}\n\n/**\n * Returns the block list settings for an array of blocks, if any exist.\n *\n * @param {Object} state     Editor state.\n * @param {Array}  clientIds Block client IDs.\n *\n * @return {Object} An object where the keys are client ids and the values are\n *                  a block list setting object.\n */\nexport const __experimentalGetBlockListSettingsForBlocks = createSelector(\n\t( state, clientIds = [] ) => {\n\t\treturn clientIds.reduce( ( blockListSettingsForBlocks, clientId ) => {\n\t\t\tif ( ! state.blockListSettings[ clientId ] ) {\n\t\t\t\treturn blockListSettingsForBlocks;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...blockListSettingsForBlocks,\n\t\t\t\t[ clientId ]: state.blockListSettings[ clientId ],\n\t\t\t};\n\t\t}, {} );\n\t},\n\t( state ) => [ state.blockListSettings ]\n);\n\n/**\n * Returns the title of a given reusable block\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {string} The reusable block saved title.\n */\nexport const __experimentalGetReusableBlockTitle = createRegistrySelector(\n\t( select ) =>\n\t\tcreateSelector(\n\t\t\t( state, ref ) => {\n\t\t\t\tdeprecated(\n\t\t\t\t\t\"wp.data.select( 'core/block-editor' ).__experimentalGetReusableBlockTitle\",\n\t\t\t\t\t{\n\t\t\t\t\t\tsince: '6.6',\n\t\t\t\t\t\tversion: '6.8',\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tconst reusableBlock = unlock( select( STORE_NAME ) )\n\t\t\t\t\t.getReusableBlocks()\n\t\t\t\t\t.find( ( block ) => block.id === ref );\n\t\t\t\tif ( ! reusableBlock ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn reusableBlock.title?.raw;\n\t\t\t},\n\t\t\t() => [ unlock( select( STORE_NAME ) ).getReusableBlocks() ]\n\t\t)\n);\n\n/**\n * Returns true if the most recent block change is be considered ignored, or\n * false otherwise. An ignored change is one not to be committed by\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was ignored.\n */\nexport function __unstableIsLastBlockChangeIgnored( state ) {\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\n\t// ignored if in-fact they result in a change in blocks state. The current\n\t// need to ignore changes not a result of user interaction should be\n\t// accounted for in the refactoring of reusable blocks as occurring within\n\t// their own separate block editor / state (#7119).\n\treturn state.blocks.isIgnoredChange;\n}\n\n/**\n * Returns the block attributes changed as a result of the last dispatched\n * action.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\n *                                 by block client ID.\n */\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\n\treturn state.lastBlockAttributesChange;\n}\n\n/**\n * Returns whether the navigation mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Is navigation mode enabled.\n */\nexport function isNavigationMode( state ) {\n\treturn state.editorMode === 'navigation';\n}\n\n/**\n * Returns the current editor mode.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} the editor mode.\n */\nexport function __unstableGetEditorMode( state ) {\n\treturn state.editorMode;\n}\n\n/**\n * Returns whether block moving mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} Client Id of moving block.\n */\nexport function hasBlockMovingClientId( state ) {\n\treturn state.hasBlockMovingClientId;\n}\n\n/**\n * Returns true if the last change was an automatic change, false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the last change was automatic.\n */\nexport function didAutomaticChange( state ) {\n\treturn !! state.automaticChangeStatus;\n}\n\n/**\n * Returns true if the current highlighted block matches the block clientId.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} Whether the block is currently highlighted.\n */\nexport function isBlockHighlighted( state, clientId ) {\n\treturn state.highlightedBlock === clientId;\n}\n\n/**\n * Checks if a given block has controlled inner blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} True if the block has controlled inner blocks.\n */\nexport function areInnerBlocksControlled( state, clientId ) {\n\treturn !! state.blocks.controlledInnerBlocks[ clientId ];\n}\n\n/**\n * Returns the clientId for the first 'active' block of a given array of block names.\n * A block is 'active' if it (or a child) is the selected block.\n * Returns the first match moving up the DOM from the selected block.\n *\n * @param {Object}   state            Global application state.\n * @param {string[]} validBlocksNames The names of block types to check for.\n *\n * @return {string} The matching block's clientId.\n */\nexport const __experimentalGetActiveBlockIdByBlockNames = createSelector(\n\t( state, validBlockNames ) => {\n\t\tif ( ! validBlockNames.length ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check if selected block is a valid entity area.\n\t\tconst selectedBlockClientId = getSelectedBlockClientId( state );\n\t\tif (\n\t\t\tvalidBlockNames.includes(\n\t\t\t\tgetBlockName( state, selectedBlockClientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn selectedBlockClientId;\n\t\t}\n\t\t// Check if first selected block is a child of a valid entity area.\n\t\tconst multiSelectedBlockClientIds =\n\t\t\tgetMultiSelectedBlockClientIds( state );\n\t\tconst entityAreaParents = getBlockParentsByBlockName(\n\t\t\tstate,\n\t\t\tselectedBlockClientId || multiSelectedBlockClientIds[ 0 ],\n\t\t\tvalidBlockNames\n\t\t);\n\t\tif ( entityAreaParents ) {\n\t\t\t// Last parent closest/most interior.\n\t\t\treturn entityAreaParents[ entityAreaParents.length - 1 ];\n\t\t}\n\t\treturn null;\n\t},\n\t( state, validBlockNames ) => [\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tvalidBlockNames,\n\t]\n);\n\n/**\n * Tells if the block with the passed clientId was just inserted.\n *\n * @param {Object}  state    Global application state.\n * @param {Object}  clientId Client Id of the block.\n * @param {?string} source   Optional insertion source of the block.\n * @return {boolean} True if the block matches the last block inserted from the specified source.\n */\nexport function wasBlockJustInserted( state, clientId, source ) {\n\tconst { lastBlockInserted } = state;\n\treturn (\n\t\tlastBlockInserted.clientIds?.includes( clientId ) &&\n\t\tlastBlockInserted.source === source\n\t);\n}\n\n/**\n * Tells if the block is visible on the canvas or not.\n *\n * @param {Object} state    Global application state.\n * @param {Object} clientId Client Id of the block.\n * @return {boolean} True if the block is visible.\n */\nexport function isBlockVisible( state, clientId ) {\n\treturn state.blockVisibility?.[ clientId ] ?? true;\n}\n\n/**\n * Returns the list of all hidden blocks.\n *\n * @param {Object} state Global application state.\n * @return {[string]} List of hidden blocks.\n */\nexport const __unstableGetVisibleBlocks = createSelector(\n\t( state ) => {\n\t\tconst visibleBlocks = new Set(\n\t\t\tObject.keys( state.blockVisibility ).filter(\n\t\t\t\t( key ) => state.blockVisibility[ key ]\n\t\t\t)\n\t\t);\n\t\tif ( visibleBlocks.size === 0 ) {\n\t\t\treturn EMPTY_SET;\n\t\t}\n\t\treturn visibleBlocks;\n\t},\n\t( state ) => [ state.blockVisibility ]\n);\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n */\nexport const __unstableGetContentLockingParent = createSelector(\n\t( state, clientId ) => {\n\t\tlet current = clientId;\n\t\tlet result;\n\t\twhile ( ( current = state.blocks.parents.get( current ) ) ) {\n\t\t\tif (\n\t\t\t\tgetBlockName( state, current ) === 'core/block' ||\n\t\t\t\tgetTemplateLock( state, current ) === 'contentOnly'\n\t\t\t) {\n\t\t\t\tresult = current;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t},\n\t( state ) => [ state.blocks.parents, state.blockListSettings ]\n);\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n *\n * @param {Object} state Global application state.\n */\nexport function __unstableGetTemporarilyEditingAsBlocks( state ) {\n\treturn state.temporarilyEditingAsBlocks;\n}\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n *\n * @param {Object} state Global application state.\n */\nexport function __unstableGetTemporarilyEditingFocusModeToRevert( state ) {\n\treturn state.temporarilyEditingFocusModeRevert;\n}\n\nexport function __unstableHasActiveBlockOverlayActive( state, clientId ) {\n\t// Prevent overlay on blocks with a non-default editing mode. If the mdoe is\n\t// 'disabled' then the overlay is redundant since the block can't be\n\t// selected. If the mode is 'contentOnly' then the overlay is redundant\n\t// since there will be no controls to interact with once selected.\n\tif ( getBlockEditingMode( state, clientId ) !== 'default' ) {\n\t\treturn false;\n\t}\n\n\t// If the block editing is locked, the block overlay is always active.\n\tif ( ! canEditBlock( state, clientId ) ) {\n\t\treturn true;\n\t}\n\n\tconst editorMode = __unstableGetEditorMode( state );\n\n\t// In zoom-out mode, the block overlay is always active for top level blocks.\n\tif (\n\t\teditorMode === 'zoom-out' &&\n\t\tclientId &&\n\t\t! getBlockRootClientId( state, clientId )\n\t) {\n\t\treturn true;\n\t}\n\n\t// In navigation mode, the block overlay is active when the block is not\n\t// selected (and doesn't contain a selected child). The same behavior is\n\t// also enabled in all modes for blocks that have controlled children\n\t// (reusable block, template part, navigation), unless explicitly disabled\n\t// with `supports.__experimentalDisableBlockOverlay`.\n\tconst blockSupportDisable = hasBlockSupport(\n\t\tgetBlockName( state, clientId ),\n\t\t'__experimentalDisableBlockOverlay',\n\t\tfalse\n\t);\n\tconst shouldEnableIfUnselected =\n\t\teditorMode === 'navigation' ||\n\t\t( blockSupportDisable\n\t\t\t? false\n\t\t\t: areInnerBlocksControlled( state, clientId ) );\n\n\treturn (\n\t\tshouldEnableIfUnselected &&\n\t\t! isBlockSelected( state, clientId ) &&\n\t\t! hasSelectedInnerBlock( state, clientId, true )\n\t);\n}\n\nexport function __unstableIsWithinBlockOverlay( state, clientId ) {\n\tlet parent = state.blocks.parents.get( clientId );\n\twhile ( !! parent ) {\n\t\tif ( __unstableHasActiveBlockOverlayActive( state, parent ) ) {\n\t\t\treturn true;\n\t\t}\n\t\tparent = state.blocks.parents.get( parent );\n\t}\n\treturn false;\n}\n\n/**\n * @typedef {import('../components/block-editing-mode').BlockEditingMode} BlockEditingMode\n */\n\n/**\n * Returns the block editing mode for a given block.\n *\n * The mode can be one of three options:\n *\n * - `'disabled'`: Prevents editing the block entirely, i.e. it cannot be\n *   selected.\n * - `'contentOnly'`: Hides all non-content UI, e.g. auxiliary controls in the\n *   toolbar, the block movers, block settings.\n * - `'default'`: Allows editing the block as normal.\n *\n * Blocks can set a mode using the `useBlockEditingMode` hook.\n *\n * The mode is inherited by all of the block's inner blocks, unless they have\n * their own mode.\n *\n * A template lock can also set a mode. If the template lock is `'contentOnly'`,\n * the block's mode is overridden to `'contentOnly'` if the block has a content\n * role attribute, or `'disabled'` otherwise.\n *\n * @see useBlockEditingMode\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block client ID, or `''` for the root container.\n *\n * @return {BlockEditingMode} The block editing mode. One of `'disabled'`,\n *                            `'contentOnly'`, or `'default'`.\n */\nexport const getBlockEditingMode = createRegistrySelector(\n\t( select ) =>\n\t\t( state, clientId = '' ) => {\n\t\t\tconst blockEditingMode = state.blockEditingModes.get( clientId );\n\t\t\tif ( blockEditingMode ) {\n\t\t\t\treturn blockEditingMode;\n\t\t\t}\n\t\t\tif ( ! clientId ) {\n\t\t\t\treturn 'default';\n\t\t\t}\n\t\t\tconst rootClientId = getBlockRootClientId( state, clientId );\n\t\t\tconst templateLock = getTemplateLock( state, rootClientId );\n\t\t\tif ( templateLock === 'contentOnly' ) {\n\t\t\t\tconst name = getBlockName( state, clientId );\n\t\t\t\tconst isContent =\n\t\t\t\t\tselect( blocksStore ).__experimentalHasContentRoleAttribute(\n\t\t\t\t\t\tname\n\t\t\t\t\t);\n\t\t\t\treturn isContent ? 'contentOnly' : 'disabled';\n\t\t\t}\n\t\t\tconst parentMode = getBlockEditingMode( state, rootClientId );\n\t\t\treturn parentMode === 'contentOnly' ? 'default' : parentMode;\n\t\t}\n);\n\n/**\n * Indicates if a block is ungroupable.\n * A block is ungroupable if it is a single grouping block with inner blocks.\n * If a block has an `ungroup` transform, it is also ungroupable, without the\n * requirement of being the default grouping block.\n * Additionally a block can only be ungrouped if it has inner blocks and can\n * be removed.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client Id of the block. If not passed the selected block's client id will be used.\n * @return {boolean} True if the block is ungroupable.\n */\nexport const isUngroupable = createRegistrySelector(\n\t( select ) =>\n\t\t( state, clientId = '' ) => {\n\t\t\tconst _clientId = clientId || getSelectedBlockClientId( state );\n\t\t\tif ( ! _clientId ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst { getGroupingBlockName } = select( blocksStore );\n\t\t\tconst block = getBlock( state, _clientId );\n\t\t\tconst groupingBlockName = getGroupingBlockName();\n\t\t\tconst _isUngroupable =\n\t\t\t\tblock &&\n\t\t\t\t( block.name === groupingBlockName ||\n\t\t\t\t\tgetBlockType( block.name )?.transforms?.ungroup ) &&\n\t\t\t\t!! block.innerBlocks.length;\n\n\t\t\treturn _isUngroupable && canRemoveBlock( state, _clientId );\n\t\t}\n);\n\n/**\n * Indicates if the provided blocks(by client ids) are groupable.\n * We need to have at least one block, have a grouping block name set and\n * be able to remove these blocks.\n *\n * @param {Object}   state     Global application state.\n * @param {string[]} clientIds Block client ids. If not passed the selected blocks client ids will be used.\n * @return {boolean} True if the blocks are groupable.\n */\nexport const isGroupable = createRegistrySelector(\n\t( select ) =>\n\t\t( state, clientIds = EMPTY_ARRAY ) => {\n\t\t\tconst { getGroupingBlockName } = select( blocksStore );\n\t\t\tconst groupingBlockName = getGroupingBlockName();\n\t\t\tconst _clientIds = clientIds?.length\n\t\t\t\t? clientIds\n\t\t\t\t: getSelectedBlockClientIds( state );\n\t\t\tconst rootClientId = _clientIds?.length\n\t\t\t\t? getBlockRootClientId( state, _clientIds[ 0 ] )\n\t\t\t\t: undefined;\n\t\t\tconst groupingBlockAvailable = canInsertBlockType(\n\t\t\t\tstate,\n\t\t\t\tgroupingBlockName,\n\t\t\t\trootClientId\n\t\t\t);\n\t\t\tconst _isGroupable = groupingBlockAvailable && _clientIds.length;\n\t\t\treturn (\n\t\t\t\t_isGroupable &&\n\t\t\t\tcanRemoveBlocks( state, _clientIds, rootClientId )\n\t\t\t);\n\t\t}\n);\n"],"mappings":"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"}